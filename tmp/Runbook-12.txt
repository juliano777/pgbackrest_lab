Backup to S3

## Objective
Customer require pgbackrest backups stored in AWS S3 and also to be able to restore from S3.

## Requirements:
- You can create a temporary account for this purpose.
- Create an s3 bucket
- You have a create a stanza as seen below.

pgBackRest supports storing repositories in Amazon S3.

Note that this is just a demo and there are other security options like TLS certificates which could be used.

# Stop and initialize a new cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode2 bash -c "rm -rf /var/lib/edb/as13/data/*"
docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/initdb -D /var/lib/edb/as13/data"

# Update basic config on pgnode2

cat << EOF | docker exec -i pgnode2 bash
echo "listen_addresses = '*'" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=awsdemo archive-push %p'" >> /var/lib/edb/as13/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as13/data/postgresql.conf
EOF

# Update the pg_hba on pgnode2
```bash
for container in pgnode2
do
docker exec $container bash -c "echo 'host all all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
docker exec $container bash -c "echo 'host replication all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
done
```
# Update pgbackrest file on pgnode2

docker exec pgnode2 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode2
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[awsdemo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```
# Update pgbackrest file on pgbkp1
```
docker exec pgbkp1 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "process-max=4" >> /etc/pgbackrest.conf
echo "repo-path=/" >> /etc/pgbackrest.conf
echo "repo-s3-bucket=pg-backup-benson" >> /etc/pgbackrest.conf
echo "repo-s3-endpoint=s3.amazonaws.com" >> /etc/pgbackrest.conf
echo "repo-s3-key=AKIATB4PW2CCRL6TAKEX" >> /etc/pgbackrest.conf
echo "repo-s3-key-secret=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" >> /etc/pgbackrest.conf
echo "repo-s3-region=us-east-2" >> /etc/pgbackrest.conf
echo "repo-type=s3" >> /etc/pgbackrest.conf
echo "retention-diff=2" >> /etc/pgbackrest.conf
echo "retention-full=2" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "stop-auto=y" >> /etc/pgbackrest.conf

echo "[awsdemo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgnode2" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
EOF
done
```
# start the database cluster on pgnode2

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"

# Create stanza awsdemo

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo start"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo stanza-create"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo check"

# Take full backup

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo --type=full backup"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo info"

root@ip:~# docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo info"
stanza: awsdemo
    status: ok
    cipher: none

    db (current)
        wal archive min/max (13): 000000010000000000000002/000000010000000000000004

        full backup: 20210828-175927F
            timestamp start/stop: 2021-08-28 17:59:27 / 2021-08-28 17:59:42
            wal start/stop: 000000010000000000000004 / 000000010000000000000004
            database size: 49.8MB, database backup size: 49.8MB
            repo1: backup set size: 8MB, backup size: 8MB
root@ip:~#


Amazon S3 > pg-backup-benson > backup/ > awsdemo/ > 20210828-175927F

# Create some objects so that we could see them during restore from S3

docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "CREATE TABLE t1pitr(id int, c1 text);"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "INSERT INTO t1pitr VALUES (1, 'testpitr');"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "create table awstest as select * from pg_class;"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "create table awstestdemo as select * from pg_description;"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "INSERT INTO t1pitr VALUES (2, 'testpitr2');"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "SELECT pg_switch_wal();"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo --type=full backup"

root@ip-:~# docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "\dt;"
              List of relations
 Schema |    Name     | Type  |    Owner
--------+-------------+-------+--------------
 public | awstest     | table | enterprisedb
 public | awstestdemo | table | enterprisedb
 public | t1pitr      | table | enterprisedb
(3 rows)

root@ip:~# docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo info"  
stanza: awsdemo
    status: ok
    cipher: none

    db (current)
        wal archive min/max (13): 000000010000000000000004/000000010000000000000007

        full backup: 20210828-175927F
            timestamp start/stop: 2021-08-28 17:59:27 / 2021-08-28 17:59:42
            wal start/stop: 000000010000000000000004 / 000000010000000000000004
            database size: 49.8MB, database backup size: 49.8MB
            repo1: backup set size: 8MB, backup size: 8MB

        full backup: 20210828-181508F
            timestamp start/stop: 2021-08-28 18:15:08 / 2021-08-28 18:15:23
            wal start/stop: 000000010000000000000007 / 000000010000000000000007
            database size: 50.3MB, database backup size: 50.3MB
            repo1: backup set size: 8.1MB, backup size: 8.1MB
root@ip-172-31-28-189:~#


Performing Restore of a specific backup from S3
==================================================

In this case we are going to be restoring a specific backup we took on S3.
We will restore to a remote onprem server.

In this case we are going to use pgrestore server.

We create a location for your restore.

docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgrestore bash -c "rm -rf /var/lib/edb/as13/data/*"

Update the pgbackrest configuration as below

docker exec pgrestore bash -c ":> /etc/pgbackrest.conf"

for container in pgrestore
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[awsdemo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done

We are going to restore 20210828-181508F on the directory we created

docker exec --user=enterprisedb pgrestore bash -c "pgbackrest --stanza=awsdemo --log-level-console=info --set=20210828-181508F restore"

# If you want to restore to a specific directory, you can use for example --db-path=/var/lib/edb/s3-restore
...
P01   INFO: restore file /var/lib/edb/as13/data/base/1/1220 (0B, 100%)
P00   INFO: write updated /var/lib/edb/as13/data/postgresql.auto.conf
P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
P00   INFO: restore command end: completed successfully (35812ms)

We could see the below entry in the postgresql.conf file

docker exec --user=enterprisedb pgrestore bash -c "cat /var/lib/edb/as13/data/postgresql.auto.conf"

root@ip:~# docker exec --user=enterprisedb pgrestore bash -c "cat /var/lib/edb/as13/data/postgresql.auto.conf"
restore_command = 'pgbackrest --stanza=awsdemo archive-get %f "%p"'

# Start database server on pgrestore

docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"

docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "\dt;"

root@ip:~# docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "\dt;"
              List of relations
 Schema |    Name     | Type  |    Owner
--------+-------------+-------+--------------
 public | awstest     | table | enterprisedb
 public | awstestdemo | table | enterprisedb
 public | t1pitr      | table | enterprisedb
(3 rows)

