Multiple Repository Support

## Objective
Customer require storing backups in multiple locations with different retention policy.

## Requirements:

- Need a clean server to create the atanza as seen below. You can choose the two repo types you wish to use.

pgBackRest team announced the introduction of multiple repository support in v2.33.
Multiple repositories allow you to have copies of your backups and WAL archives in separate locations to increase your redundancy and provide even more protection for your data

Up to four repositories may be configured and each one can be any repo type, e.g. S3 or Posix
The configuration below defines two repositories. repo1 is Posix and stored on locally-mounted NFS volume; the repository should always be located off the Postgres server in case disaster strikes. repo2 is stored on S3.

# Stop and initialize a new cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode2 bash -c "rm -rf /var/lib/edb/as13/data/*"

# Stop previous stanza

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=azuredemo stop"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=azuredemo stanza-delete"

# Initialize new Cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/initdb -D /var/lib/edb/as13/data"

# Update basic config on pgnode2

cat << EOF | docker exec -i pgnode2 bash
echo "listen_addresses = '*'" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=multi-demo archive-push %p'" >> /var/lib/edb/as13/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as13/data/postgresql.conf
EOF

# Update the pg_hba on pgnode2
```bash

for container in pgnode2
do
docker exec $container bash -c "echo 'host all all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
docker exec $container bash -c "echo 'host replication all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
done
```
Update the backup server pgbackrest.conf file

# Update pgbackrest file on pgbkp1

docker exec pgbkp1 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp1
do
cat << EOF | docker exec -i $container bash

echo "[global]" >> /etc/pgbackrest.conf
echo "## General Options" >> /etc/pgbackrest.conf
echo "process-max=4" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "archive-async=y" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "## Local backup server" >> /etc/pgbackrest.conf
echo "repo1-path=/backupdir" >> /etc/pgbackrest.conf
echo "repo1-retention-full=2" >> /etc/pgbackrest.conf
echo "repo1-retention-full-type=count" >> /etc/pgbackrest.conf
echo "repo1-retention-diff=1" >> /etc/pgbackrest.conf

echo "## Azure backup configuration" >> /etc/pgbackrest.conf
echo "repo2-azure-account=pgzurebackup" >> /etc/pgbackrest.conf
echo "repo2-azure-container=pgazurecontainer" >> /etc/pgbackrest.conf
echo "repo2-azure-key=xxxxx" >> /etc/pgbackrest.conf
echo "repo2-path=/demo-repo" >> /etc/pgbackrest.conf
echo "repo2-type=azure" >> /etc/pgbackrest.conf
echo "repo2-retention-full=6" >> /etc/pgbackrest.conf
echo "repo2-retention-diff=6" >> /etc/pgbackrest.conf

echo "## GCP backup configuration" >> /etc/pgbackrest.conf
echo "repo3-type=gcs" >> /etc/pgbackrest.conf
echo "repo3-path=/repo" >> /etc/pgbackrest.conf
echo "repo3-gcs-bucket=pggcp-bucket" >> /etc/pgbackrest.conf
echo "repo3-gcs-key=/var/lib/pgbackrest/<Your json file>" >> /etc/pgbackrest.conf
echo "repo3-retention-full=4" >> /etc/pgbackrest.conf
echo "repo3-retention-diff=4" >> /etc/pgbackrest.conf

echo "## Stanza Def" >> /etc/pgbackrest.conf
echo "[multi-demo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgnode2" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgbkp1 bash -c "cat /etc/pgbackrest.conf"

# Update pgbackrest file on pgnode2

docker exec pgnode2 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode2
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[multi-demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgnode2 bash -c "cat /etc/pgbackrest.conf"

Adding archive-async=y to the configuration in order to use asynchronous archiving processes within pgBackRest itself. Even if PostgreSQL archiver process is still stuck, the archives will reach the working repositories:

Note that the retention has been configured differently on each repository. repo1 has a shorter retention to save space but still provide several backups and plenty of WAL on local storage that is both fast and cheap (in terms of bandwidth cost) to access. repo2 has a longer retention and is stored in S3 where storage is cheap but retrieving data is both slower and more expensive than repo1. repo2 is both a fail-safe in case something goes wrong with repo1 and a resource to restore backups from remote sites.

pgBackRest will treat repo1 with higher priority than repo2 for certain commands like restore and archive-get. In general, the lower-numbered repositories should be faster and/or cheaper than the higher-numbered repositories.

# start the database cluster on pgnode2

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "show archive_command;"

# Create stanza gcpdemo

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo start"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo stanza-create"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo check"

root@ip:~# docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo stanza-create"
2021-08-31 23:49:53.445 P00   INFO: stanza-create command begin 2.34: --exec-id=31665-ded3413f --log-level-console=info --log-level-file=debug --pg1-host=pgnode2 --pg1-host-user=enterprisedb --pg1-path=/var/lib/edb/as13/data --repo2-azure-account=<redacted> --repo2-azure-container=pgazurecontainer --repo2-azure-key=<redacted> --repo3-gcs-bucket=pggcp-bucket --repo3-gcs-key=<redacted> --repo1-path=/backupdir --repo2-path=/demo-repo --repo3-path=/repo --repo2-type=azure --repo3-type=gcs --stanza=multi-demo
P00   INFO: stanza-create for stanza 'multi-demo' on repo1
P00   INFO: stanza-create for stanza 'multi-demo' on repo2
P00   INFO: stanza-create for stanza 'multi-demo' on repo3
P00   INFO: stanza-create command end: completed successfully (2452ms)

# Take full backup

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --type=full backup"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo info"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=1 --type=full backup"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=2 --type=full backup"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=3 --type=full backup"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=1 info"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=2 info"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo --repo=3 info"

Now a backup should be run for each repository. Most commands operate automatically on all repos but backup requires the repo to be specified. Each repo is likely to have different retention and backup schedules so backups should be run independently.

When restoring, pgBackRest will automatically select the best backup from the repositories based on your criteria. Here is an example of time-based recovery:

$ pgbackrest --stanza=multi-demo --no-delta --db-path=/var/lib/edb/data-restore --type=time "--target=2021-06-28 14:07:40.352142-04" restore
...
P00   INFO: restore command begin 2.34: --no-delta --exec-id=5517-00e8677e --log-level-console=info --log-level-file=debug --pg1-path=/var/lib/edb/data-restore --repo1-host=backupserver --repo1-host-user=pgbackrest --stanza=multi-demo --target="2021-06-28 14:07:40.352142-04" --type=time
P00   INFO: repo1: restore backup set 20210628-123903F
...
P00   INFO: write updated /var/lib/edb/data-restore/postgresql.auto.conf
P00   INFO: restore global/pg_control (performed last to ensure aborted restores cannot be started)
P00   INFO: restore command end: completed successfully (133471ms)

In this case only the backup from repo1 was valid because of the time restriction. Even if a later time was specified that would seem to favor the later backup in repo2, the same backup from repo1 will be selected. This is because pgBackRest tends to prefer the repo with higher priority, i.e. repo1 over repo2, under the assumption that it will be faster and/or cheaper than a repository with lower priority.

If you want to restore from a specific repository then simply specify the preferred repository using --repo. The archive-get command generated for recovery will always search all repositories in priority order for WAL segments.
