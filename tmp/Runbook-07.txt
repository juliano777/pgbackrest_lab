## Objective
A customer require you to setup streaming replication using the backups taken by pgbackrest and also configure backup to be taken from standby server.
In this demo scenario, we will consider our running Postgres to be the master server

## Requirements:

- None but the setup prepared in runbook-06

SETTING UP STREAMING REPLICATION USING PGBACKREST

For my configuration as seen earlier, i have three server as seen below..

pgnode1 primary
pgnode2 standby1
pgnode3 stadnby2
pgbkp1  pgbackrest server

# Make sure that the database on pgnode is running
```
docker exec --user=enterprisedb pgnode1 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data status"
```
This is based on our initial setup we have had all this while

Perform a backup
``` bash
docker exec pgbkp1 bash -c "sudo -iu pgbackrest pgbackrest --stanza=demo --type=full backup"
docker exec pgbkp1 bash -c "sudo -iu pgbackrest pgbackrest --stanza=demo info"
```

#Prepare the servers for Streaming Replication

#On the PRIMARY server, create a specific user for the replication:

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "CREATE ROLE replic_user WITH LOGIN REPLICATION PASSWORD 'postgres'"

## We already have pg_hba.conf file set in previous runbook

##Update ~enterprisedb/.pgpass:
```bash
for container in pgnode1 pgnode2 pgnode3 pgrestore
do

cat << EOF | docker exec --user=enterprisedb -i $container bash
echo "*:*:*:replic_user:postgres" >> /var/lib/edb-as/.pgpass
chmod 600 /var/lib/edb-as/.pgpass
EOF

done
```

#Update the primary pgBackRest configuration file:

# /etc/pgbackrest.conf
``` bash

docker exec pgnode1 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgnode1 bash -c "cat /etc/pgbackrest.conf"

#Update the standby pgBackRest configuration file:

# /etc/pgbackrest.conf
``` bash
docker exec pgnode2 bash -c ":> /etc/pgbackrest.conf"

docker exec pgnode3 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode2 pgnode3
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
echo "recovery-option=primary_conninfo=host=pgnode1 user=replic_user port=5444" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgnode1 bash -c "cat /etc/pgbackrest.conf"
docker exec pgnode2 bash -c "cat /etc/pgbackrest.conf"
docker exec pgnode3 bash -c "cat /etc/pgbackrest.conf"

As you may notice, it is the same configuration as on primary with the extra recovery-option. The idea is to automatically configure the Streaming Replication connection string with the restore command.

## Lets just make sure sudo is installed on the servers
```bash
for container in pgnode1 pgnode2 pgnode3 pgrestore
do
docker exec $container apt install sudo
docker exec $container bash -c "chmod 777 /etc/pgbackrest.conf"
done
```
#Then, make sure the configuration on standby is correct by executing the info command. It should print the same output as in the pgbkp1 server
```
docker exec pgnode2 bash -c "sudo -iu enterprisedb pgbackrest --stanza=demo info"
docker exec pgnode3 bash -c "sudo -iu enterprisedb pgbackrest --stanza=demo info"
```
docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode3 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode2 bash -c "rm -rf /var/lib/edb/as13/data/*"
docker exec --user=enterprisedb pgnode3 bash -c "rm -rf /var/lib/edb/as13/data/*"
docker exec --user=enterprisedb pgnode3 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data status"

Restore the backup taken from the primary server on standby1 and standby2

Restore on standby1 and standby2 
``` bash
for container in pgnode1 pgnode2
do
docker exec $container bash -c "sudo -iu enterprisedb pgbackrest --stanza=demo --type=standby --no-delta restore"
done
```

The restore will add extra information to the postgresql.auto.conf file:

docker exec --user=enterprisedb pgnode3 bash -c "cat /var/lib/edb/as13/data/postgresql.auto.conf"
docker exec --user=enterprisedb pgnode2 bash -c "cat /var/lib/edb/as13/data/postgresql.auto.conf"

root@ip:~# docker exec --user=enterprisedb pgnode3 bash -c "cat /var/lib/edb/as13/data/postgresql.auto.conf"
# Do not edit this file manually!
# It will be overwritten by the ALTER SYSTEM command.

# Recovery settings generated by pgBackRest restore on 2021-08-25 01:46:09
primary_conninfo = 'host=pgnode1 user=replic_user port=5444'
restore_command = 'pgbackrest --stanza=demo archive-get %f "%p"'

The --type=standby option creates the standby.signal needed for Advanced Server to start in standby mode. All we have to do now is to start the Advanced Server instances:
```bash
docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
docker exec --user=enterprisedb pgnode3 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
```

If the replication setup is correct, you should see those processes on the pg1-srv server:

docker exec --user=enterprisedb pgnode3 bash -c "ps -o pid,cmd fx"

root@ip:~# docker exec --user=enterprisedb pgnode3 bash -c "ps -o pid,cmd fx"
  PID CMD
10355 /usr/lib/edb-as/13/bin/edb-postgres -D /var/lib/edb/as13/data
10356  \_ postgres: logger
10357  \_ postgres: startup recovering 000000010000000000000079
10364  \_ postgres: checkpointer
10365  \_ postgres: background writer
10367  \_ postgres: stats collector
10370  \_ postgres: walreceiver streaming 0/79000F68
10371 ps -o pid,cmd fx

CHECK ON PRIMARY, WE SEE THAT STREAMING IS GOING ON..

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "SELECT * FROM pg_stat_replication;"

root@ip:~# docker exec --user=enterprisedb pgnode1 psql -p 5444 -d edb -c "SELECT * FROM pg_stat_replication;"
Error: You must install at least one postgresql-client-<version> package
root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "SELECT * FROM pg_stat_replication;"
  pid  | usesysid |   usename   | application_name | client_addr | client_hostname | client_port |          backend_start          | backend_xmin |   state   |  sent_lsn  | write_lsn  | flush_lsn  | r         eplay_lsn | write_lag | flush_lag | replay_lag | sync_priority | sync_state |            reply_time
-------+----------+-------------+------------------+-------------+-----------------+-------------+---------------------------------+--------------+-----------+------------+------------+------------+--         ----------+-----------+-----------+------------+---------------+------------+----------------------------------
 21693 |    16416 | replic_user | walreceiver      | 172.18.0.5  |                 |       40988 | 25-AUG-21 01:48:10.66993 +00:00 |              | streaming | 0/79000F68 | 0/79000F68 | 0/79000F68 | 0         /79000F68 |           |           |            |             0 | async      | 25-AUG-21 01:50:11.000453 +00:00
 21694 |    16416 | replic_user | walreceiver      | 172.18.0.6  |                 |       49780 | 25-AUG-21 01:48:23.76091 +00:00 |              | streaming | 0/79000F68 | 0/79000F68 | 0/79000F68 | 0         /79000F68 |           |           |            |             0 | async      | 25-AUG-21 01:50:14.033988 +00:00
(2 rows)


Take backups from the standby servers

Add the following settings to the pgBackRest configuration file on pgbkp1, in the [demo] stanza section:

``` bash
docker exec pgbkp1 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-path=/backupdir" >> /etc/pgbackrest.conf
echo "repo1-retention-full=2" >> /etc/pgbackrest.conf
echo "repo1-retention-full-type=count" >> /etc/pgbackrest.conf
echo "repo1-retention-diff=1" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[demo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgnode1" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg2-host=pgnode2" >> /etc/pgbackrest.conf
echo "pg2-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg2-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg3-host=pgnode3" >> /etc/pgbackrest.conf
echo "pg3-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg3-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "backup-standby=y" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgbkp1 bash -c "cat /etc/pgbackrest.conf"

#Now, perform a backup fetching the data from the first standby server found in the configuration:

docker exec pgbkp1 bash -c "sudo -iu pgbackrest pgbackrest --stanza=demo --type=full backup"
...
P00   INFO: execute non-exclusive pg_start_backup(): backup begins after the requested immediate checkpoint completes
P00   INFO: backup start archive = 00000001000000000000007A, lsn = 0/7A000028
P00   INFO: wait for replay on the standby to reach 0/7A000028
P00   INFO: replay on the standby reached 0/7A000028
P01   INFO: backup file pgnode1:/var/lib/edb/as13/data/log/enterprisedb-2021-08-24_042509.log (39.5KB, 0%) checksum 989411f9c0bd2101a1beb91da45125c88baca446
P00   INFO: new backup label = 20210825-015913F
P00   INFO: backup command end: completed successfully (61404ms)
P00   INFO: expire command begin 2.34: --exec-id=9239-8e0bb524 --log-level-console=info --log-level-file=debug --repo1-path=/backupdir --repo1-retention-diff=1 --repo1-retention-full=2 --repo1-retention-full-type=count --stanza=demo
P00   INFO: repo1: expire full backup 20210824-185519F
P00   INFO: repo1: remove expired backup 20210824-185519F
P00   INFO: repo1: 13-1 remove archive, start = 00000001000000000000006E, stop = 000000010000000000000077
P00   INFO: expire command end: completed successfully (210ms)
