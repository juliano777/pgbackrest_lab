## Objective
Use tablespace mapping during the restore.

## Requirements:
- Any of the previous runbooks.

- Use existing or create a stanza

Tablespace Map Option.
Restore a tablespace into the specified directory.
Moves a tablespace to a new location during the restore. This is useful when tablespace locations are not the same on a replica, or an upgraded system has different mount points.

# Stop and initialize a new cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode1 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode1 bash -c "rm -rf /var/lib/edb/as13/data/*"

# Stop previous stanza

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo stop"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=multi-demo stanza-delete"

# Initialize new Cluster

docker exec --user=enterprisedb pgnode1 bash -c "/usr/lib/edb-as/13/bin/initdb -D /var/lib/edb/as13/data"

# Update basic config on pgnode1

cat << EOF | docker exec -i pgnode1 bash
echo "listen_addresses = '*'" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=demo archive-push %p'" >> /var/lib/edb/as13/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as13/data/postgresql.conf
EOF

# Update the pg_hba on pgnode1
```bash

for container in pgnode1
do
docker exec $container bash -c "echo 'host all all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
docker exec $container bash -c "echo 'host replication all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
done

On our backupserver, we have the following setup..

# /etc/pgbackrest.conf
``` bash
docker exec pgbkp1 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-path=/backupdir" >> /etc/pgbackrest.conf
echo "repo1-retention-full=2" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[demo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgnode1" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgbkp1 bash -c "cat /etc/pgbackrest.conf"

# Update pgbackrest file on pgnode2

docker exec pgnode1 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done

# start the database cluster on pgnode1

docker exec --user=enterprisedb pgnode1 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "show archive_command;"

# Create stanza demo

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=demo start"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=demo stanza-create"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=demo check"

On the database server, perform the follwoing steps

Create the following directory for tablespace owned by enterprisedb user

docker exec --user=enterprisedb pgnode1 bash -c "mkdir -p /var/lib/edb-as/pgdata"

# The below script will create the tablespace, database, tables and confirm the table locations.
```
docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "create tablespace tbs_test owner enterprisedb location '/var/lib/edb-as/pgdata';"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "create database testdb tablespace tbs_test;"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "create table testtab as select * from pg_description;"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "create table testtab1 as select * from pg_description;"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\dt"

docker exec --user=enterprisedb pgnode1 bash -c "ls -al /var/lib/edb/as13/data/pg_tblspc"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab');"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\db"
```

##OUTPUT OF THE ABOVE SHOULD LOOK LIKE BELOW>>

root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "create database testdb tablespace tbs_test;"
CREATE DATABASE

root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "create table testtab as select * from pg_description;"
SELECT 5161
root@ip:~#
root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "create table testtab1 as select * from pg_description;"
SELECT 5161

root@ip9:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\dt"
            List of relations
 Schema |   Name   | Type  |    Owner
--------+----------+-------+--------------
 public | testtab  | table | enterprisedb
 public | testtab1 | table | enterprisedb
(2 rows)

root@ip:~# docker exec --user=enterprisedb pgnode1 bash -c "ls -al /var/lib/edb/as13/data/pg_tblspc"
total 8
drwx------  2 enterprisedb enterprisedb 4096 Sep  1 02:05 .
drwx------ 21 enterprisedb enterprisedb 4096 Sep  1 02:04 ..
lrwxrwxrwx  1 enterprisedb enterprisedb   22 Sep  1 02:05 16384 -> /var/lib/edb-as/pgdata

root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab');"
            pg_relation_filepath
---------------------------------------------
 pg_tblspc/16384/PG_13_202007201/16385/16386
(1 row)

root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"
            pg_relation_filepath
---------------------------------------------
 pg_tblspc/16384/PG_13_202007201/16385/16392
(1 row)


root@ip:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\db"
                List of tablespaces
    Name    |    Owner     |        Location
------------+--------------+------------------------
 pg_default | enterprisedb |
 pg_global  | enterprisedb |
 tbs_test   | enterprisedb | /var/lib/edb-as/pgdata
(3 rows)


##On the backup server, we take a backup of this cluster..

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=demo --type=full backup"

docker exec --user=enterprisedb pgnode1 bash -c "pgbackrest --stanza=demo info"


## To perform a restore, we are going to do that on a different data directory on pgrestore server and map the tablespace to another directory
# Confirm that database pgrestore is stoped
```
docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
```
# Create data_directory and tablespace directory on pgrestpre
```
docker exec --user=enterprisedb pgrestore bash -c "mkdir -p /var/lib/edb-as/pgdata"

docker exec --user=enterprisedb pgrestore bash -c "mkdir -p /var/lib/edb-as/tablespace"
```
# Perform the restore to pgrestore server and map the tablespace and specify the data_directory
```
docker exec --user=enterprisedb pgrestore bash -c "pgbackrest --stanza=demo --tablespace-map=tbs_test=/var/lib/edb-as/tablespace --db-path=/var/lib/edb-as/pgdata restore"
```
# The below scripts confirms the restore and tables properly maped
```
docker exec --user=enterprisedb pgrestore bash -c "ls -al /var/lib/edb-as/tablespace"

docker exec --user=enterprisedb pgrestore bash -c "ls -al /var/lib/edb-as/pgdata"
```
# Start the restored server
```
docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb-as/pgdata start"
```
# Conform tables and location
```
docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\dt"

docker exec --user=enterprisedb pgrestore bash -c "ls -al /var/lib/edb-as/pgdata/pg_tblspc"

docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"

docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"

docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\db"
```

##OUTPUT AFTER RESTORE

root@ip:~# docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb-as/pgdata start"
waiting for server to start...
... UTC HINT:  Future log output will appear in directory "log".
 done
server started

root@ip:~# docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\dt"
            List of relations
 Schema |   Name   | Type  |    Owner
--------+----------+-------+--------------
 public | testtab  | table | enterprisedb
 public | testtab1 | table | enterprisedb
(2 rows)

root@ip:~# docker exec --user=enterprisedb pgrestore bash -c "ls -al /var/lib/edb-as/pgdata/pg_tblspc"
total 8
drwx------  2 enterprisedb enterprisedb 4096 Sep  1 02:09 .
drwx------ 21 enterprisedb enterprisedb 4096 Sep  1 02:11 ..
lrwxrwxrwx  1 enterprisedb enterprisedb   26 Sep  1 02:09 16384 -> /var/lib/edb-as/tablespace

root@ip:~# docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"
            pg_relation_filepath
---------------------------------------------
 pg_tblspc/16384/PG_13_202007201/16385/16392
(1 row)

root@ip:~# docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "SELECT pg_relation_filepath('testtab1');"
            pg_relation_filepath
---------------------------------------------
 pg_tblspc/16384/PG_13_202007201/16385/16392
(1 row)

root@ip-:~# docker exec --user=enterprisedb pgnode1 /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "\db"
                List of tablespaces
    Name    |    Owner     |        Location
------------+--------------+------------------------
 pg_default | enterprisedb |
 pg_global  | enterprisedb |
 tbs_test   | enterprisedb | /var/lib/edb-as/pgdata
(3 rows)


Conclusion: As seen above, this option can be used to map tablespaces to another location during restore

FYI:

Map All Tablespaces Option ( --tablespace-map-all )

Restore all tablespaces into the specified directory.
By default tablespaces are restored into their original locations and while this behavior can be modified by with the tablespace-map open it is sometime preferable to remap all tablespaces to a new directory all at once. 

The path specified will be the parent path used to create all the tablespaces in the backup.
example: tablespace-map-all=/data/tablespace