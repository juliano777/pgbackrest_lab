### Objective
Updating pgbackrest after database upgrade

## Requirements:
-Atleast Runbook 1-5

# We are going to install edb postgres 12 on pgrestore container, create a stanza, uograde the database clustrer to 13 and upgrade the pgbackrest stanza.

# Stop any cluster running on pgrestore.

docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgrestore bash -c "rm -rf /var/lib/edb/as13/data/*"

# Install EDB postgres 12

for container in pgrestore
do

docker exec $container apt-get update
docker exec $container apt-get -y install edb-as12-server

docker exec $container bash -c "mkdir -p /var/lib/edb"
docker exec $container bash -c "chown -R enterprisedb:enterprisedb /var/lib/edb"
docker exec --user=enterprisedb $container bash -c "mkdir -p /var/lib/edb/as12/data"
docker exec --user=enterprisedb $container bash -c "/usr/lib/edb-as/12/bin/initdb -D /var/lib/edb/as12/data"
docker exec $container bash -c "chown -R enterprisedb:enterprisedb /var/lib/edb"

done
```

# Update database Config

cat << EOF | docker exec -i pgrestore bash
echo "listen_addresses = '*'" >> /var/lib/edb/as12/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as12/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=upgrade-demo archive-push %p'" >> /var/lib/edb/as12/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as12/data/postgresql.conf
EOF
```
for container in pgrestore
do
docker exec $container bash -c "echo 'host all all all md5' >> /var/lib/edb/as12/data/pg_hba.conf"
docker exec $container bash -c "echo 'host replication all all md5' >> /var/lib/edb/as12/data/pg_hba.conf"
done

# Create sample objects in database

docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/12/bin/pg_ctl -D /var/lib/edb/as12/data start"
docker exec --user=enterprisedb pgrestore psql -p 5444 -d edb -c "ALTER USER enterprisedb WITH PASSWORD 'Xoo4eiho'"
docker exec --user=enterprisedb pgrestore psql -p 5444 -d edb -c "CREATE DATABASE testdb"
docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/12/bin/pgbench -p 5444 -i -s 100 testdb"

# stop or delete any stanza on pgbkp2 

docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=demo stop"
docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=demo stanza-delete"

#Update the pgbackrest file on pgbkp2

# /etc/pgbackrest.conf
``` bash
docker exec pgbkp2 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp2
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-path=/backupdir" >> /etc/pgbackrest.conf
echo "repo1-retention-full=2" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[upgrade-demo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgrestore" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as12/data" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgbkp2 bash -c "cat /etc/pgbackrest.conf"
```
# Update pgbackrest file on pgrestore

docker exec pgrestore bash -c ":> /etc/pgbackrest.conf"

for container in pgrestore
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp2" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[upgrade-demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as12/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```

docker exec pgbkp2 bash -c "chmod 775 /etc/pgbackrest.conf"
docker exec pgrestore bash -c "chmod 775 /etc/pgbackrest.conf"

docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "show archive_command;"

docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo start"
docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo stanza-create"
docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo check"
```
docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo --type=full backup"
docker exec --user=enterprisedb pgrestore bash -c "pgbackrest --stanza=upgrade-demo info"
```
docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/initdb -D /var/lib/edb/as13/data"

# Check cluster compactibility before upgrade

docker exec --user=enterprisedb pgrestore bash -c "cd /tmp && /usr/lib/edb-as/13/bin/pg_upgrade -b /usr/lib/edb-as/12/bin -B /usr/lib/edb-as/13/bin -d /var/lib/edb/as12/data -D /var/lib/edb/as13/data -c"

```
# Stop old cluster
docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/12/bin/pg_ctl -D /var/lib/edb/as12/data stop"
```
# Perform upgrade
docker exec --user=enterprisedb pgrestore bash -c "cd /tmp && /usr/lib/edb-as/13/bin/pg_upgrade -b /usr/lib/edb-as/12/bin -B /usr/lib/edb-as/13/bin -d /var/lib/edb/as12/data -D /var/lib/edb/as13/data"

# Note you can run the analyze script provided after updgrade but in this case we just want to demonstrate the behaviour of pgbackret after upgrade

```
# Update new cluster database parameters

cat << EOF | docker exec -i pgrestore bash
echo "listen_addresses = '*'" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=upgrade-demo archive-push %p'" >> /var/lib/edb/as13/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as13/data/postgresql.conf
EOF

```
# Update the pgbackrest config to point to the new cluster to point to new cluster

docker exec pgbkp2 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp2
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-path=/backupdir" >> /etc/pgbackrest.conf
echo "repo1-retention-full=2" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[upgrade-demo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgrestore" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
EOF
done

```
# update the pgbackrest file on pgrestorte to point to new cluster

docker exec pgrestore bash -c ":> /etc/pgbackrest.conf"

for container in pgrestore
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp2" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[upgrade-demo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```

Before starting the new cluster, the stanza-upgrade command must be run.

#Upgrade the stanza
docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo --no-online stanza-upgrade"

root@ip:~# docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo --no-online stanza-upgrade"
P00   INFO: stanza-upgrade command begin 2.34: --exec-id=10621-66e527a7 --log-level-console=info --log-level-file=debug --no-online --pg1-host=pgrestore --pg1-host-user=enterprisedb --pg1-path=/var/lib/edb/as13/data --repo1-path=/backupdir --stanza=upgrade-demo
P00   INFO: stanza-upgrade for stanza 'upgrade-demo' on repo1
P00   INFO: stanza-upgrade command end: completed successfully (237ms)

#Start the new cluster and confirm it is successfully installed.

docker exec --user=enterprisedb pgrestore bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
```
root@ip:~# docker exec --user=enterprisedb pgrestore /usr/lib/edb-as/13/bin/psql -p 5444 -d testdb -c "show archive_command;"
                 archive_command
--------------------------------------------------
 pgbackrest --stanza=upgrade-demo archive-push %p
(1 row)

root@ip:~# docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo check"
P00   INFO: check command begin 2.34: --exec-id=10710-c7964036 --log-level-console=info --log-level-file=debug --pg1-host=pgrestore --pg1-host-user=enterprisedb --pg1-path=/var/lib/edb/as13/data --repo1-path=/backupdir --stanza=upgrade-demo
P00   INFO: check repo1 configuration (primary)
P00   INFO: check repo1 archive for WAL (primary)
P00   INFO: WAL segment 000000010000000000000095 successfully archived to '/backupdir/archive/upgrade-demo/13-2/0000000100000000/000000010000000000000095-76672d60653856d58d5da51304168a2fe920edf8.gz' on repo1
P00   INFO: check command end: completed successfully (1468ms)


# Check pgbackrest configuration

docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo check"

docker exec --user=pgbackrest pgbkp2 bash -c "pgbackrest --stanza=upgrade-demo --type=full backup"
docker exec --user=enterprisedb pgrestore bash -c "pgbackrest --stanza=upgrade-demo info"

root@ip:~# docker exec --user=enterprisedb pgrestore bash -c "pgbackrest --stanza=upgrade-demo info"
stanza: upgrade-demo
    status: ok
    cipher: none

    db (prior)
        wal archive min/max (12): 000000010000000000000052/000000010000000000000054

        full backup: 20210914-141333F
            timestamp start/stop: 2021-09-14 14:13:33 / 2021-09-14 14:14:28
            wal start/stop: 000000010000000000000052 / 000000010000000000000052
            database size: 1.5GB, database backup size: 1.5GB
            repo1: backup set size: 89.9MB, backup size: 89.9MB

    db (current)
        wal archive min/max (13): 000000010000000000000097/000000010000000000000097

        full backup: 20210914-151155F
            timestamp start/stop: 2021-09-14 15:11:55 / 2021-09-14 15:12:50
            wal start/stop: 000000010000000000000097 / 000000010000000000000097
            database size: 1.5GB, database backup size: 1.5GB
            repo1: backup set size: 90.2MB, backup size: 90.2MB
root@ip:~#

Remove the old cluster.