## Objective
Customer requires a basic backup setup to GCS
This will be a demo setup and other security configuration could be applied after understanding this.

## Requirements:
Rbo 12

Google Cloud Storage (GCS) Support for pgBackRest

The release of pgBackRest: 2.33 with a number of new features including multiple repository support and GCS support. 
pgBackRest stores backups in GCS within a specific bucket. pgBackRest repositories can be stored in the bucket root by setting "repoX-path=/" (where "X" is the repo number), but it is usually best to specify a prefix, such as /repo, so logs and other GCS generated content can also be stored in the bucket. 

Here's a basic configuration:
## Objective
Customer require pgbackrest backups stored in GCP.

## Requirements:
/path/to/service-key.json is the key file downloaded from a service account that has the Storage Object Admin permission on the bucket.

You can use the below link to create and manage service account keys
https://cloud.google.com/iam/docs/creating-managing-service-account-keys

When you copy this keys to your server, you can make it owned by pgbackrest if you are using this user for your backup.

You can also access the below link to create a bucket in GCP
https://cloud.google.com/storage/docs/creating-buckets

Note that this is just a demo and there are other security options like TLS certificates which could be used.

# Stop and initialize a new cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data stop"
docker exec --user=enterprisedb pgnode2 bash -c "rm -rf /var/lib/edb/as13/data/*"

# Stop previous stanza

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo stop"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=awsdemo stanza-delete"

# Initialize new Cluster

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/initdb -D /var/lib/edb/as13/data"

# Update basic config on pgnode2

cat << EOF | docker exec -i pgnode2 bash
echo "listen_addresses = '*'" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_mode = on" >> /var/lib/edb/as13/data/postgresql.conf
echo "archive_command = 'pgbackrest --stanza=gcpdemo archive-push %p'" >> /var/lib/edb/as13/data/postgresql.conf
echo "logging_collector = on" >> /var/lib/edb/as13/data/postgresql.conf
EOF

# Update the pg_hba on pgnode2
```bash

for container in pgnode2
do
docker exec $container bash -c "echo 'host all all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
docker exec $container bash -c "echo 'host replication all all md5' >> /var/lib/edb/as13/data/pg_hba.conf"
done
```
# Update pgbackrest file on pgnode2

docker exec pgnode2 bash -c ":> /etc/pgbackrest.conf"

for container in pgnode2
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-host=pgbkp1" >> /etc/pgbackrest.conf
echo "repo1-host-user=pgbackrest" >> /etc/pgbackrest.conf
echo "log-level-console=info" >> /etc/pgbackrest.conf
echo "log-level-file=debug" >> /etc/pgbackrest.conf
echo "delta=y" >> /etc/pgbackrest.conf

echo "[gcpdemo]" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
echo "pg1-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-port=5444" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgnode2 bash -c "cat /etc/pgbackrest.conf"

# Update pgbackrest file on pgbkp1

# Move the json file to the linux sever and then to the docker machine

 docker cp benson-264207-b74ecf7e7569.json  pgbkp1:/var/lib/pgbackrest
 docker exec pgbkp1 bash -c "chown pgbackrest. /var/lib/pgbackrest/benson-264207-b74ecf7e7569.json"
 docker exec pgbkp1 bash -c "ls -al /var/lib/pgbackrest/"

total 24
pgbackrest pgbackrest 4096 Aug 28 20:14 .
root       root       4096 Aug 28 04:10 ..
pgbackrest pgbackrest   62 Aug 28 04:04 .pgpass
pgbackrest pgbackrest 4096 Aug 28 04:20 .ssh
pgbackrest pgbackrest 2321 Aug 28 20:10 benson-264207-b74ecf7e7569.json

```
# Update pgbkp1 Server

docker exec pgbkp1 bash -c ":> /etc/pgbackrest.conf"

for container in pgbkp1
do
cat << EOF | docker exec -i $container bash
echo "[global]" >> /etc/pgbackrest.conf
echo "repo1-type=gcs" >> /etc/pgbackrest.conf
echo "repo1-path=/repo" >> /etc/pgbackrest.conf
echo "repo1-gcs-bucket=pggcp-bucket" >> /etc/pgbackrest.conf
echo "repo1-gcs-key=/var/lib/pgbackrest/benson-264207-b74ecf7e7569.json" >> /etc/pgbackrest.conf
echo "retention-diff=2" >> /etc/pgbackrest.conf
echo "retention-full=2" >> /etc/pgbackrest.conf
echo "start-fast=y" >> /etc/pgbackrest.conf
echo "stop-auto=y" >> /etc/pgbackrest.conf

echo "[gcpdemo]" >> /etc/pgbackrest.conf
echo "pg1-host=pgnode2" >> /etc/pgbackrest.conf
echo "pg1-host-user=enterprisedb" >> /etc/pgbackrest.conf
echo "pg1-path=/var/lib/edb/as13/data" >> /etc/pgbackrest.conf
EOF
done
```
docker exec pgbkp1 bash -c "cat /etc/pgbackrest.conf"

# start the database cluster on pgnode2

docker exec --user=enterprisedb pgnode2 bash -c "/usr/lib/edb-as/13/bin/pg_ctl -D /var/lib/edb/as13/data start"
docker exec --user=enterprisedb pgnode2 /usr/lib/edb-as/13/bin/psql -p 5444 -d edb -c "show archive_command;"

# Create stanza gcpdemo

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo start"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo stanza-create"
docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo check"

# Take full backup

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo --type=full backup"

docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo info"

root@ip:~# docker exec --user=pgbackrest pgbkp1 bash -c "pgbackrest --stanza=gcpdemo info"
stanza: gcpdemo
    status: ok
    cipher: none

    db (current)
        wal archive min/max (13): 000000010000000000000002/000000010000000000000004

        full backup: 20210828-212705F
            timestamp start/stop: 2021-08-28 21:27:05 / 2021-08-28 21:31:25
            wal start/stop: 000000010000000000000004 / 000000010000000000000004
            database size: 49.8MB, database backup size: 49.8MB
            repo1: backup set size: 8MB, backup size: 8MB

pggcp-bucket/repo/backup/gcpdemo/20210828-212705F
